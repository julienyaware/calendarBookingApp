{"version":3,"sources":["services/Db.js","components/ConfirmationDetails.js","components/TimeSlots.js","components/CfCalendar.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","ConfirmationDetails","selectedSlotDateAndTime","useState","reason","setReason","time","setTime","showTimeSlots","refreshPage","window","location","reload","className","onClick","onSubmit","event","preventDefault","collection","add","Time","Reason","then","docRef","alert","catch","error","console","type","placeholder","required","onChange","e","target","value","disabled","JSON","stringify","allTimeSlotsInDay","TimeSlots","alreadyExistingAppointments","datePicked","bookAppointment","setBookAppointment","setSelectedSlotDateAndTime","alreadyTakenSlots","calendar","map","slot","Date","parse","date_time","selectedDate","moment","format","start","end","startTime","endTime","isBefore","timeSlots","push","getSlots","index","isBooked","some","log","triggerBookAppointmentState","CfCalendar","date","setDate","setShowTimeSlots","existingAppointments","setExistingAppointments","a","axios","get","result","data","minDate","fetchData","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcb2b6db.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nlet firebaseConfig = {\r\n    apiKey: \"AIzaSyAuaVTE7wtP582PjgobKVYHYEwc6u_erVI\",\r\n    authDomain: \"cfchallenge-a1270.firebaseapp.com\",\r\n    databaseURL: \"https://cfchallenge-a1270-default-rtdb.firebaseio.com\",\r\n    projectId: \"cfchallenge-a1270\",\r\n    storageBucket: \"cfchallenge-a1270.appspot.com\",\r\n    messagingSenderId: \"964995108794\",\r\n    appId: \"1:964995108794:web:498affa58cfe1b4a239783\",\r\n    measurementId: \"G-5PCYTL29HJ\"\r\n};\r\n\t\r\n// Initializing Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nlet db = firebase.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from 'react'\r\nimport db from '../services/Db'\r\nimport TimeSlots from './TimeSlots';\r\n\r\nfunction ConfirmationDetails({selectedSlotDateAndTime}) {\r\n\r\n  const [reason, setReason] = useState(\"\")\r\n  const [name, setName] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [showTimeSlots, setShowTimeSlots] = useState(false)\r\n\r\n  const sub = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Add data to the store\r\n    db.collection(\"confirmations\").add({\r\n      Time: time,\r\n      Reason: reason\r\n    })\r\n      .then((docRef) => {\r\n        alert(\"Appointment with mentor confirmed on: \\n\"+ selectedSlotDateAndTime +\"\\nReason for appointment is :\\n\" + reason )\r\n        refreshPage()\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error booking appointment: \", error)\r\n        alert(\"Error booking appointment: \", error)\r\n      });\r\n  }\r\n\r\n  const triggerShowTimeSlots = () => {\r\n    setShowTimeSlots(true)\r\n  }\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload()\r\n\r\n  }\r\n  return (\r\n    <div>\r\n      {!showTimeSlots && (\r\n        <center className=\"confirmationForm\">\r\n          <button className=\"backButton\" onClick={refreshPage}>pick a different time slot</button>\r\n          <form\r\n            onSubmit={(event) => { sub(event) }}>\r\n            <label>Reason for booking an appointment:</label>\r\n            <br />\r\n            <textarea type=\"text\" placeholder=\"your reason\" required\r\n              onChange={(e) => { setReason(e.target.value) }}></textarea>\r\n            <br /><br />\r\n            <label>Selected time slot:</label>\r\n            <br />\r\n            <textarea disabled type=\"text\" placeholder={selectedSlotDateAndTime}\r\n              onChange={(e) => { setTime(JSON.stringify({selectedSlotDateAndTime}))} }></textarea>\r\n            <br /><br />\r\n            <button className=\"timeStop\" type=\"submit\">Submit</button>\r\n          </form>\r\n        </center>\r\n      )}\r\n\r\n      {showTimeSlots && (\r\n        <TimeSlots />\r\n      )}\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ConfirmationDetails\r\n","import React, { useState } from 'react'\r\nimport moment from 'moment'\r\nimport ConfirmationDetails from './ConfirmationDetails'\r\n\r\n\r\nlet allTimeSlotsInDay = []\r\n\r\nfunction TimeSlots({ alreadyExistingAppointments, datePicked }) {\r\n\r\n  const [bookAppointment, setBookAppointment] = useState(false)\r\n  const [selectedSlotDateAndTime, setSelectedSlotDateAndTime] = useState()\r\n\r\n  const alreadyTakenSlots = alreadyExistingAppointments.calendar.map(\r\n    (slot) => new Date(Date.parse(slot.date_time))\r\n  )\r\n\r\n\r\n  let selectedDate = moment(datePicked).format(\"YYYY-MM-DD\");\r\n\r\n\r\n  const getSlots = (start, end) => {\r\n\r\n\r\n    const startTime = moment(start, 'HH:mm');\r\n    const endTime = moment(end, 'HH:mm');\r\n\r\n\r\n    if (endTime.isBefore(startTime)) {\r\n      endTime.add(1, 'day');\r\n    }\r\n\r\n    let timeSlots = [];\r\n\r\n    while (startTime <= endTime) {\r\n      timeSlots.push(new moment(startTime).format('HH:mm:ss'));\r\n      startTime.add(1, 'hours');\r\n    }\r\n    return timeSlots;\r\n  }\r\n  allTimeSlotsInDay = getSlots('01:00', '00:00')\r\n\r\n  const triggerBookAppointmentState = (slot) => {\r\n    const start = new Date(selectedDate + \" \" + slot)\r\n    setSelectedSlotDateAndTime(start)\r\n    const end = new Date(selectedDate + \" \" + moment(slot, 'HH:mm').add(1, 'hours').format('HH:mm'))\r\n\r\n    const isBooked = alreadyTakenSlots.some((slot) => {\r\n      return start <= slot && slot < end;\r\n    });\r\n\r\n    if(isBooked){\r\n    alert(\"Slot is not available\")\r\n    } else {\r\n      setBookAppointment(true)\r\n    }\r\n    console.log(isBooked)\r\n    console.log(start)\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!bookAppointment && (\r\n        <div className=\"slots\">\r\n          {allTimeSlotsInDay.map((slot, index) => (\r\n            <button className=\"timeStop\" key={index} onClick={() => triggerBookAppointmentState(slot)}>\r\n              {slot}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {bookAppointment && (\r\n        <ConfirmationDetails  selectedSlotDateAndTime={selectedSlotDateAndTime}/>\r\n      )}\r\n\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default TimeSlots","import React, { useState,useEffect }  from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport TimeSlots from './TimeSlots'\r\nimport axios from 'axios'\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\nfunction CfCalendar() {\r\n    \r\n  const [date,setDate] = useState(new Date())\r\n  const [showTimeSlots, setShowTimeSlots] = useState(false)\r\n  const [existingAppointments,setExistingAppointments] = useState({})\r\n\r\n  // Get data on already booked appointments\r\n  async function fetchData() {\r\n    try {\r\n     const  result = await axios.get(\"https://private-37dacc-cfcalendar.apiary-mock.com/mentors/1/agenda\")\r\n    setExistingAppointments(result.data)\r\n    console.log(existingAppointments);\r\n     setShowTimeSlots(true)\r\n    } catch (error) {\r\n      alert('Please check your internet connection:',error)\r\n    }\r\n  }\r\n\r\n\r\n    const onChange = date => {\r\n      setDate(date)\r\n      fetchData()\r\n    \r\n    }\r\n\r\n  \r\n    return (\r\n        <div className=\"App-Content\">\r\n        <Calendar\r\n         minDate = {new Date()}\r\n         onChange={onChange}\r\n         value={date}\r\n        />\r\n        {showTimeSlots ?  <TimeSlots alreadyExistingAppointments={existingAppointments} datePicked={date}/> : null}  \r\n        {console.log(date)}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CfCalendar\r\n","import React,{useState} from 'react';\nimport './App.css';\nimport CfCalendar from './components/CfCalendar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <section className=\"header\">\n        <h1 className=\"header-title\">Career Foundry Calendar</h1>\n      </section>\n      <h3 className=\"instructions\">Please select the date you would like to book your appointment</h3>\n      <header className=\"App-Content\">\n      <CfCalendar/>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}